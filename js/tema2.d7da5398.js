(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["tema2"],{"0661":function(a,e,s){a.exports=s.p+"img/icono-yt.0e5f1361.svg"},"144d":function(a,e,s){a.exports=s.p+"img/10.64210fc2.png"},2391:function(a,e,s){a.exports=s.p+"img/material-complementario.06dbfac1.svg"},4234:function(a,e,s){a.exports=s.p+"img/12.a9709d01.svg"},"5b0d":function(a,e,s){"use strict";s.r(e);var t=function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"curso-main-container pb-3"},[t("BannerInterno",{attrs:{subTitulo:"2. Problemas de consistencia y escalabilidad"}}),t("div",{staticClass:"container tarjeta tarjeta--blanca p-4 p-md-5 overflow-hidden"},[a._m(0),a._m(1),t("p",{staticClass:"mb-5"},[a._v("La consistencia es un principio esencial en los sistemas distribuidos, ya que garantiza que los datos replicados entre múltiples nodos mantengan coherencia y precisión, incluso ante actualizaciones simultáneas o fallos del sistema.")]),t("div",{staticClass:"bg-full-width bg-color-7 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-7 text-white"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Concepto de consistencia en sistemas distribuidos ")]),a._m(2),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_4.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(3)])]),a._m(4)])])]),a._m(5),t("p",{staticClass:"mb-5"},[a._v("El equilibrio entre consistencia, disponibilidad y tolerancia a fallos representa uno de los mayores desafíos en el diseño de sistemas distribuidos.")]),t("div",{staticClass:"bg-full-width bg-color-7 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-7 text-white order-2"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Modelo CAP y sus implicaciones ")]),a._m(6),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_5.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(7)])]),a._m(8)])])]),a._m(9),t("p",{staticClass:"mb-5"},[a._v("En sistemas distribuidos, garantizar que todos los nodos compartan un estado coherente de la información es un desafío constante debido a la latencia de red y posibles fallos. Para gestionar este reto, se implementan diversas técnicas de manejo de consistencia, ajustadas a las necesidades de cada aplicación, según sus requerimientos de rendimiento, disponibilidad y exactitud de datos.")]),t("div",{staticClass:"row align-items-start mb-5"},[a._m(10),t("div",{staticClass:"col-lg-8 order-lg-1"},[t("AcordionA",{attrs:{tipo:"b"}},[t("div",{staticClass:"div",attrs:{titulo:"Consistencia fuerte"}},[t("p",[a._v("En la consistencia fuerte, todos los nodos del sistema reflejan inmediatamente las actualizaciones realizadas en cualquier nodo antes de confirmar la operación.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". En un sistema de transacciones bancarias, al realizar una transferencia, el saldo actualizado debe reflejarse de inmediato en todos los nodos, garantizando que no se realicen operaciones sobre un saldo desactualizado.")]),t("h5",[a._v("Técnicas aplicadas:")]),t("ul",{staticClass:"lista-ul--color"},[t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Bloqueo distribuido. Para evitar accesos simultáneos inconsistentes.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Protocolos de consenso (Raft, Paxos). Para garantizar que todos los nodos acuerden un mismo valor antes de confirmar cambios.")])])])]),t("div",{staticClass:"div",attrs:{titulo:"Consistencia eventual"}},[t("p",[a._v("Este enfoque permite que los nodos no se sincronicen de inmediato, pero asegura que con el tiempo todos convergen al mismo estado de datos.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". En sistemas de redes sociales, un “me gusta” puede no reflejarse de inmediato en todos los servidores, pero tras unos segundos o minutos, todos mostrarán el mismo número actualizado.")]),t("h5",[a._v("Técnicas aplicadas:")]),t("ul",{staticClass:"lista-ul--color"},[t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("o Replicación asíncrona. Los cambios se propagan a otros nodos de forma progresiva.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("o Uso de vectores de versión. Permiten gestionar el orden de las actualizaciones y resolver conflictos cuando ocurren cambios simultáneos.")])])])])])],1)]),t("div",{staticClass:"row align-items-start mb-5"},[a._m(11),t("div",{staticClass:"col-lg-8"},[t("AcordionA",{attrs:{tipo:"b"}},[t("div",{staticClass:"div",attrs:{titulo:"Consistencia causal"}},[t("p",[a._v("Este modelo garantiza que las operaciones relacionadas causalmente se observen en el mismo orden en todos los nodos, mientras que las operaciones independientes pueden ser vistas en distinto orden (Boronat Seguí, 2012).")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Si un usuario publica un comentario en un post y luego lo edita, todos los nodos deben mostrar primero el comentario antes de mostrar la edición, asegurando la relación causal.")]),t("h5",[a._v("Técnicas aplicadas:")]),t("ul",{staticClass:"lista-ul--color"},[t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Relación de dependencias. Identificar eventos relacionados para mantener su orden.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Protocolos de replicación causal. Que aseguran la preservación de dependencias entre eventos durante la replicación.")])])])]),t("div",{staticClass:"div",attrs:{titulo:"Uso de quorum"}},[t("p",[a._v("El enfoque de quorum se emplea para lograr consistencia controlada entre nodos mediante el uso de lecturas y escrituras en un subconjunto de réplicas, de modo que la intersección de estos subconjuntos garantice la coherencia (Boronat Seguí, 2012).")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". En Cassandra, una operación de escritura puede requerir confirmación en al menos 3 de 5 nodos, mientras que una lectura consultará al menos 3 nodos. Si el número de lecturas y escrituras consultadas se superpone, se asegura consistencia.")])])])],1)]),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Replicación y control de conflictos")]),t("p",[a._v("El manejo de consistencia se complementa con técnicas de resolución de conflictos, necesarias cuando ocurren actualizaciones simultáneas en nodos distintos.")]),t("p",{staticClass:"mb-5"},[a._v("Ejemplo. En sistemas como Amazon DynamoDB, se usan estrategias de last write wins (LWW), donde el último cambio, según la marca de tiempo es el que se conserva, o se permite la reconciliación manual por la aplicación en caso de conflictos complejos.")]),a._m(12),a._m(13),t("p",{staticClass:"mb-5"},[a._v("La capacidad de un sistema para crecer sin perder eficiencia ni disponibilidad es esencial en entornos distribuidos donde la demanda puede escalar rápidamente.")]),t("div",{staticClass:"bg-full-width bg-color-7 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-7 text-white order-2"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Concepto de escalabilidad ")]),a._m(14),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_6.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(15)])]),a._m(16)])])]),a._m(17),t("p",{staticClass:"mb-5"},[a._v("La mejora de la escalabilidad en sistemas distribuidos requiere la aplicación de estrategias que permitan atender un mayor volumen de solicitudes, usuarios o procesamiento de datos sin sacrificar el rendimiento, la disponibilidad ni la eficiencia del sistema. Para ello, se aplican métodos de diseño, implementación y gestión que optimizan el crecimiento de la infraestructura conforme a las necesidades del negocio o del proyecto.")]),t("div",{staticClass:"row align-items-start mb-5"},[a._m(18),t("div",{staticClass:"col-lg-8 order-lg-1"},[t("AcordionA",{attrs:{tipo:"b"}},[t("div",{staticClass:"div",attrs:{titulo:"Descomposición en microservicios"}},[t("p",[a._v("Dividir una aplicación monolítica en microservicios independientes, es una estrategia esencial para mejorar la escalabilidad. Cada microservicio se puede desplegar, actualizar y escalar de manera independiente, según su carga.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". En una plataforma de compras en línea, el servicio de pagos y el servicio de inventario pueden escalar de manera separada si presentan diferentes niveles de demanda.")]),t("h5",[a._v("Técnicas aplicadas:")])]),t("div",{staticClass:"div",attrs:{titulo:"Balanceo de carga"}},[t("p",[a._v("El balanceo de carga distribuye las solicitudes entrantes entre varios nodos del sistema, evitando que un servidor se sature mientras otros permanecen inactivos. Además, permite agregar o quitar nodos, según las necesidades de tráfico.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Un sitio de educación virtual utiliza un balanceador de carga para distribuir las conexiones de estudiantes entre varios servidores de aplicación, evitando caídas durante periodos de alta demanda como inscripciones o evaluaciones.")])]),t("div",{staticClass:"div",attrs:{titulo:"Caché distribuida"}},[t("p",[a._v("Utilizar sistemas de caché distribuido como Redis o Memcached reduce el acceso frecuente a bases de datos, permitiendo recuperar datos con mayor rapidez y disminuyendo la carga de procesamiento en las instancias de almacenamiento.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Una red social almacena en caché los perfiles más consultados para evitar consultas repetidas a la base de datos central cada vez que un usuario accede a la información de un perfil popular.")])])])],1)]),t("div",{staticClass:"row align-items-start mb-5"},[a._m(19),t("div",{staticClass:"col-lg-8"},[t("AcordionA",{attrs:{tipo:"b"}},[t("div",{staticClass:"div",attrs:{titulo:"Escalado horizontal y vertical"}},[t("p",[a._v("El escalado horizontal agrega más nodos al sistema para distribuir la carga, mientras que el escalado vertical incrementa los recursos de hardware en un nodo específico (Muñoz Escoí, 2013).")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Un servicio de streaming de música puede aumentar el número de instancias de servidores de transmisión en distintas regiones durante picos de tráfico, implementando un escalado horizontal en la nube.")])]),t("div",{staticClass:"div",attrs:{titulo:"Uso de bases de datos distribuidas y particionamiento"}},[t("p",[a._v("Las bases de datos distribuidas, permiten almacenar y procesar datos en múltiples nodos, mientras que el particionamiento (sharding) divide los datos en fragmentos gestionables, permitiendo consultas en paralelo y reduciendo los tiempos de respuesta.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Una aplicación financiera distribuye las transacciones por regiones geográficas para procesarlas en bases de datos diferentes, mejorando la capacidad de respuesta ante un crecimiento en el número de operaciones.")])]),t("div",{staticClass:"div",attrs:{titulo:"Automatización con infraestructura como código (IaC)"}},[t("p",[a._v("La automatización de la creación y gestión de recursos mediante IaC (como Terraform o AWS CloudFormation) facilita el escalado automático de la infraestructura, según métricas de uso, garantizando eficiencia y reducción de tiempos de configuración manual.")]),t("p",[t("b",[a._v("Ejemplo")]),a._v(". Un sistema de comercio electrónico configura automáticamente nuevas instancias de servidores cuando el uso de CPU supera un umbral definido.")])])])],1)]),a._m(20),a._m(21),t("div",{staticClass:"bg-full-width border-top color-primario"},[t("div",{staticClass:"p-4 p-md-5"},[t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("MATERIAL COMPLEMENTARIO")]),t("div",{staticClass:"row material-complementario"},[t("div",{staticClass:"col-12 col-md-6 col-lg-7"},[t("p",[a._v("Los invitamos a explorar el material complementario de este curso, en esta sección encontrará recursos que le permitirán profundizar y enriquecer su aprendizaje en los temas tratados en esta unidad.")]),t("p",{staticClass:"d-flex my-4"},[t("img",{staticClass:"me-3",style:{"max-width":"16px"},attrs:{src:s("a437")}}),t("a",{attrs:{href:" https://csc-knu.github.io/sys-prog/books/Andrew%20S.%20Tanenbaum%20-%20Distributed%20Systems.%20Principles%20and%20Paradigms.pdf ",target:"_blank",rel:"noopener noreferrer"}},[a._v("Tanenbaum, A. S., & van Steen, M. (2018). Distributed Systems: Principles and Paradigms (3ª ed.).")])]),t("p",{staticClass:"d-flex my-4"},[t("img",{staticClass:"me-3",style:{"max-width":"16px"},attrs:{src:s("a437")}}),t("a",{attrs:{href:" https://www.designgurus.io/blog/consistency-patterns-distributed-systems ",target:"_blank",rel:"noopener noreferrer"}},[a._v("DesignGurus. (Junio 7 del 2025). Consistency patterns in distributed systems: A complete guide. DesignGurus. ")])]),t("p",{staticClass:"d-flex my-4"},[t("img",{staticClass:"me-3",style:{"max-width":"16px"},attrs:{src:s("0661")}}),t("a",{attrs:{href:"https://www.youtube.com/watch?v=B_Hp0HEht1Y ",target:"_blank",rel:"noopener noreferrer"}},[a._v("Software Guru. [@softwareguru]. (2023, 11 de septiembre). Talks 2 Code 2023 - Arquitectura de Software basada en Microservicios. [Vídeo]. YouTube. ")])])]),a._m(22)])])])])],1)},i=[function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("63f2"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-8"},[t("p",{attrs:{"data-aos":"fade-left"}},[a._v("En el estudio de sistemas distribuidos, los problemas de consistencia y escalabilidad representan retos claves que determinan la calidad y confiabilidad de las aplicaciones. La consistencia se refiere a la necesidad de mantener datos coherentes entre múltiples nodos que operan de forma simultánea, mientras que la escalabilidad se centra en la capacidad del sistema para adaptarse al aumento de usuarios y cargas de trabajo sin degradar su rendimiento. ")]),t("div",{staticClass:"bg-color-2 p-4",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-start"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("9b35")}})]),t("div",{staticClass:"col-lg"},[t("p",{staticClass:"mb-0"},[a._v("Comprender cómo estos problemas impactan el diseño y funcionamiento de los sistemas distribuidos, permite al estudiante reconocer la importancia de implementar estrategias adecuadas que equilibren el rendimiento, la disponibilidad y la integridad de los datos, asegurando que las soluciones tecnológicas respondan de manera efectiva, a las demandas de crecimiento y uso real (Muñoz Escoí, 2013).")])])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_2_1","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("2.1")]),a._v(" Concepto de consistencia en sistemas distribuidos")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Concepto de consistencia en sistemas distribuidos")]),a._v(", se abordan los distintos niveles de consistencia, su papel dentro del teorema CAP y los retos técnicos asociados a su mantenimiento. A través de ejemplos prácticos y estrategias como el uso de protocolos de consenso y sincronización, se ofrece una comprensión sólida sobre cómo lograr coherencia de datos en entornos distribuidos complejos.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Concepto de consistencia en sistemas distribuidos .")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-5 mb-3 mb-lg-0"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("95e6"),alt:""}})])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_2_2","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("2.2")]),a._v(" Modelo CAP y sus implicaciones")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Modelo CAP y sus implicaciones")]),a._v(", se analiza este principio fundamental propuesto por Eric Brewer, que establece que un sistema distribuido no puede garantizar simultáneamente las tres propiedades. A través de una explicación clara de sus componentes, ejemplos prácticos y decisiones de diseño asociadas, se brinda al lector una comprensión profunda de cómo el Modelo CAP orienta la construcción de sistemas robustos y adaptables frente a las limitaciones inherentes de la comunicación en red.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Modelo CAP y sus implicaciones .")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-5 mb-3 mb-lg-0 order-1"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("6b50"),alt:""}})])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_2_3","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("2.3")]),a._v(" Técnicas de manejo de consistencia")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{staticClass:"mb-4 mb-lg-0",attrs:{src:s("791e"),alt:""}})])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("figure",[t("img",{staticClass:"mb-4 mb-lg-0",attrs:{src:s("7ebd"),alt:""}})])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-lg-4 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("7a59"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-8 order-lg-1"},[t("div",{staticClass:"bg-color-4 p-5",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-start"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("a91d")}})]),t("div",{staticClass:"col-lg text-white"},[t("p",{staticClass:"mb-0"},[a._v("Las técnicas de manejo de consistencia en sistemas distribuidos permiten equilibrar la disponibilidad y la coherencia de datos, según las necesidades de la aplicación, utilizando modelos de consistencia fuerte, eventual y causal, además de mecanismos de quorum, replicación y resolución de conflictos. Cada técnica se implementa considerando el Modelo CAP, asegurando que los sistemas distribuidos mantengan la integridad de los datos mientras se adaptan a las realidades de la red y de los requerimientos de negocio.")])])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_2_4","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("2.4")]),a._v(" Concepto de escalabilidad")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Concepto de escalabilidad")]),a._v(", se aborda este principio clave en el diseño de arquitecturas distribuidas, explorando las estrategias verticales y horizontales que permiten adaptar los sistemas al aumento de usuarios, datos o transacciones. A través de ejemplos reales y buenas prácticas, el documento proporciona una comprensión integral de cómo diseñar soluciones escalables que mantengan la calidad del servicio ante escenarios de alta demanda, asegurando así el éxito operativo y la sostenibilidad tecnológica.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Concepto de escalabilidad.")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-5 mb-3 mb-lg-0 order-1"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("de8b"),alt:""}})])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_2_5","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("2.5")]),a._v(" Estrategias para mejorar la escalabilidad")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{staticClass:"mb-4 mb-lg-0",attrs:{src:s("144d"),alt:""}})])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("figure",[t("img",{staticClass:"mb-4 mb-lg-0",attrs:{src:s("89f4"),alt:""}})])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row justify-content-center align-items-center bg-color-6 bg-full-width"},[t("div",{staticClass:"col-lg-12"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-7 mb-3 mb-lg-0 p-5",attrs:{"data-aos":"fade-left"}},[t("p",[a._v("Las estrategias para mejorar la escalabilidad en sistemas distribuidos incluyen:")]),t("ul",{staticClass:"lista-ul--color"},[t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Descomposición en microservicios.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Balanceo de carga.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Uso de caché distribuida.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Escalado horizontal y vertical.")])]),t("i",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Bases de datos distribuidas y particionamiento.")])]),t("li",{staticClass:"mb-0 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Automatización con infraestructura como código.")])])])]),t("div",{staticClass:"col-lg-5",attrs:{"data-aos":"zoom-in"}},[t("img",{staticClass:"img-fluid mx-auto mx-lg-0 ms-lg-auto mb-4 mb-lg-0",staticStyle:{"max-width":"486px"},attrs:{src:s("4234"),alt:""}})])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-full-width bg-color-4 mb-5"},[t("div",{staticClass:"px-4 px-md-5 py-4"},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("9010")}})]),t("div",{staticClass:"col-lg text-white"},[t("p",{staticClass:"mb-0"},[a._v("Estas prácticas permiten que un sistema distribuido responda eficientemente a la demanda variable, manteniendo tiempos de respuesta estables, reduciendo costos operativos y garantizando la disponibilidad del servicio para los usuarios.")])])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-12 col-md-6 col-lg-3 offset-lg-1"},[t("figure",[t("img",{attrs:{src:s("2391"),alt:""}})])])}],o={name:"Tema2",mounted:function(){var a=this;this.$nextTick((function(){a.$aosRefresh()}))}},n=o,r=s("2877"),c=Object(r["a"])(n,t,i,!1,null,null,null);e["default"]=c.exports},"63f2":function(a,e,s){a.exports=s.p+"img/1.0eaba04a.png"},"6b50":function(a,e,s){a.exports=s.p+"img/4.e7744d5c.png"},"791e":function(a,e,s){a.exports=s.p+"img/5.fda008b1.png"},"7a59":function(a,e,s){a.exports=s.p+"img/7.7010a32a.png"},"7ebd":function(a,e,s){a.exports=s.p+"img/6.30fc7cec.png"},"89f4":function(a,e,s){a.exports=s.p+"img/11.ac228ec6.png"},9010:function(a,e,s){a.exports=s.p+"img/13.ec51a53d.svg"},"95e6":function(a,e,s){a.exports=s.p+"img/3.e098d600.png"},"9b35":function(a,e,s){a.exports=s.p+"img/2.03cb4591.svg"},a437:function(a,e,s){a.exports=s.p+"img/link.317b045f.svg"},a91d:function(a,e,s){a.exports=s.p+"img/8.9d58a203.svg"},de8b:function(a,e,s){a.exports=s.p+"img/9.8acedb42.png"},f906:function(a,e,s){a.exports=s.p+"img/icono-pdf.5c464bfe.svg"}}]);
//# sourceMappingURL=tema2.d7da5398.js.map